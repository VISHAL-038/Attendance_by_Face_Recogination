{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/streamlit-component-lib/node_modules/react/index.js","../../src/event.mjs","../../src/event-target.mjs","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/AwaitValue.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../fb/File.ts","../visitor/builderctor.ts","../ipc/metadata/file.ts","../builder/index.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/iterable.ts","../io/whatwg/builder.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.ts","../Arrow.dom.ts","../node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/hoist-non-react-statics/node_modules/react-is/index.js","../node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/streamlit-component-lib/node_modules/react/cjs/react.production.min.js","../node_modules/object-assign/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","module","exports","require","privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","this","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","value","keys","defineRedirectDescriptor","defineCallDescriptor","apply","arguments","getWrapper","proto","wrapper","BaseEvent","CustomEvent","call","create","constructor","isFunc","getOwnPropertyDescriptor","defineWrapper","getPrototypeOf","isStopped","setPassiveListener","type","composedPath","stopPropagation","stopImmediatePropagation","Boolean","bubbles","composed","cancelBubble","initEvent","window","setPrototypeOf","listenersMap","isObject","x","getListeners","listeners","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","addEventListener","options","optionsIsObj","capture","undefined","removeEventListener","dispatchEvent","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","defaultPrevented","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","o","minLen","n","toString","slice","name","from","test","_createForOfIteratorHelper","Symbol","iterator","F","s","done","e","_e","f","it","normalCompletion","didErr","step","_e2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","Promise","then","_asyncToGenerator","fn","self","args","_slicedToArray","_arr","_n","_d","_s","_i","push","_AwaitValue","wrapped","_awaitAsyncGenerator","AsyncGenerator","front","back","resume","result","wrappedAwait","settle","_invoke","request","_wrapAsyncGenerator","_asyncGeneratorDelegate","inner","awaitWrap","iter","waiting","pump","asyncIterator","flatbuffers","inRange","a","min","max","ToDictionary","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","endOfStream","read","shift","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","toUint8Array","TextDecoderPolyfill","encodeUtf8","encoder","TextEncoderPolyfill","_setPrototypeOf","p","__proto__","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_typeof","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","Super","NewTarget","ITERATOR_DONE","freeze","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_this","_closedPromise","r","_closedPromiseResolve","reason","_context","return","_ensureOpen","resolvers","_values","_error","streamAdapters","_","_context2","abort","_context3","close","_context4","_context5","_this2","_ref2","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigIntCtor","BigIntAvailable","_ref4","BigInt64ArrayUnavailableError","BigInt64Array","BigInt64ArrayCtor","_ref6","BigUint64ArrayUnavailableError","BigUint64Array","BigUint64ArrayCtor","isNumber","isBoolean","isFunction","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isWritableDOMStream","isWritableNodeStream","isReadableNodeStream","toArrayBufferViewIterator","SharedArrayBuf","SharedArrayBuffer","memcpy","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","ArrayCtor","wrap","buffers","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","_toArrayBufferViewAsyncIterator","_context8","emit","_context7","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","fromAsyncIterable","fromDOMStream","fromNodeStream","byteRange","cmd","bufferLength","threw","_yield","_ref","isNaN","_yield$byteRange","throw","_fromAsyncIterable","_yield2","_yield$byteRange2","_fromDOMStream","_yield3","AdaptiveByteReader","_ref3","_yield$byteRange3","releaseLock","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","_context6","readInto","_readInto","_context9","_yield$reader$read","onEvent","_fromNodeStream","cleanup","events","_iterator","_step$value","evt","destroy","_yield4","race","map","_yield$_awaitAsyncGen","_yield$_awaitAsyncGen2","isFinite","_yield$byteRange4","_defineProperty","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread2","forEach","getOwnPropertyDescriptors","defineProperties","property","receiver","base","hasOwnProperty","desc","org","flatbuf","arrow","apache","AbstractVector","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","NS7624605610262437867","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","Schema_","BufferType","Message_","iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","values","_step","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","_step2","sum","_iterator2","rhsInside","lhsInside","popcnt_array","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_toConsumableArray","Visitor","nodes","visit","getVisitFn","throwIfNotFound","_node","visitor","dtype","Data","Vector","inferDType","DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","TypeComparator","schema","compareFields","fields","others","every","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","comparer","toStringTag","ArrayType","Int_","_this3","Date_","_this4","Time_","_this5","Timestamp_","_this6","Interval_","_this7","child","_this8","valueType","_this9","join","Union_","_this10","typeIdToChildIndex","idx","_this11","_this12","Map_","_this13","atomicDictionaryId","getId","_this14","strideForType","nullCount","childData","floor","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","sliceOrExtendArray","BufferBuilder","_resize","extra","reserved","array","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","val","cur","OffsetsBufferBuilder","WideBufferBuilder","_ArrayType64","buffer64","ArrayType64","nulls","finished","_nulls","_isValid","new","flush","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","queueingStrategy","highWaterMark","sizeProperty","numChunks","append","toVector","throughIterable","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","throughAsyncIterable","FixedWidthBuilder","opts","VariableWidthBuilder","pending","_pending","current","_pendingLength","_flush","pendingLength","_flushPending","BoolBuilder","NullBuilder","DateBuilder","DateDayBuilder","DateMillisecondBuilder","DecimalBuilder","DictionaryBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","FixedSizeBinaryBuilder","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","FloatBuilder","Float16Builder","Float32Builder","Float64Builder","Parent","Class","bind","bignumToString","bignumToBigInt","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","hint","assign","memo","BN","num","IntBuilder","Int8Builder","Int16Builder","Int32Builder","Int64Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","BinaryBuilder","Utf8Builder","Run","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","Row","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","kr","vr","k","v","has","callbackfn","thisArg","callback","m","str","MapRow","createRowProxy","getChildAt","StructRow","defineRowProxyProperties","findIndex","tmp","row","_step3","getter","setter","_iterator3","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","clampIndex","adjust","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","Chunked","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","chunk","isDictionary","_indices","flatten","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","vectors","selectChunkArgs","Column","_field","SingleChunkColumn","metadata","column","rest","some","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs3","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","res","selectVectorChildrenArgs","_selectVectorChildrenArgs","toKeysAndValues","ret","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","ListBuilder","_run","run","FixedSizeListBuilder","_get","childIndex","MapBuilder","StructBuilder","UnionBuilder","_valueToChildTypeId","childTypeId","SparseUnionBuilder","DenseUnionBuilder","SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setUtf8","setBinary","setFixedSizeBinary","setDecimal","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","getBuilderConstructor","defaultOptions","getChildOptions","T","setVisitor","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","File_","_Footer","Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","numRecordBatches","block","getRecordBatch","numDictionaries","getDictionaryBatch","buf","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","rb","FileBlock","startDictionariesVector","db","dictionaryBatchesOffset","finishFooterBuffer","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","AsyncByteQueue","sync","ByteStream","ByteStreamSource","peek","AsyncByteStream","AsyncByteStreamSource","body","closed","cancel","_args5","RandomAccessFile","readAt","getInt32","nBytes","AsyncRandomAccessFile","file","_handle","stat","_yield$this$readAt","bytesRead","_yield$file$read","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","fromString","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","VectorLoader","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nodesIndex","buffersIndex","nextBufferRange","JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","joined","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","BufferRegion","schemaFieldsFromJSON","_schema","fromJSON","fieldChildrenFromJSON","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldNodes","batch","nodesLength","decodeBuffers","bufferRegions","buffersLength","decodeSchemaFields","fieldsLength","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","typeAssembler","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","AsyncMessageReader","_args6","JSONMessageReader","_dictionaryIndex","_body","_batchIndex","batches","flattenDataSources","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","VectorAssembler","RangeError","isNull","addBuffer","_nullV","_byteLength","_bufferRegions","assembler","vectorChildren","_assembler$visitMany2","_assembler$visitMany3","assembleResult","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","RecordBatchWriter","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","_sink","writeAll","writeAllAsync","reset","sink","objectMode","_started","_writeFooter","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","compareTo","_position","_writeSchema","payload","_InternalEmptyPlaceholderRecordBatch","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","write","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writableStrategy","readableStrategy","RecordBatchStreamWriter","writer","RecordBatchFileWriter","_writeMagic","_step5","_iterator5","_writeAllAsync","noopBuf","nullBufs","bitmapLength","ensureSameLengthData","batchLength","l","batchData","_changeLengthAndBackfillNullBitmap","distributeColumnsIntoRecordBatches","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","BaseVector","_bindDataAccessors","VectorName","isConcatSpreadable","BinaryVector","BoolVector","vectorFromValuesWithType","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","_args$","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","Int64Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","_row","bound","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","partial0","partial2","GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getUtf8","getBinary","getFixedSizeBinary","getDecimal","decimal","IndexOfVisitor","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","IteratorVisitor","vectorIterator","getFn","getVisitor","nullByte","nullBit","nullableIterator","ToArrayVisitor","arrayOfVector","iteratorVisitor","variableWidthColumnErrorMessage","____","visitFields","newDataType","_input$values","_input$type","_input$nullValues","getVectorConstructor","_nullValues$input$val","transform","indexOfVisitor","toArrayVisitor","getByteWidth","byteWidthVisitor","wrapNullableSet","VectorCtor","partialType0","getColumnAt","getColumnIndex","Writer","nameToIndex","selectAt","columnName","newIdx","oldToNew","_other$schema$fields$2","_f","_fs","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","RecordBatchReader","isSync","open","opening","cols","_dictionaries","DictionaryCollector","collect","_selectFieldArgs2","fs","vs","readAllSync","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","RecordBatchJSONReaderImpl","fromArrowJSON","fromFileHandle","fromAsyncByteStream","RecordBatchFileReader","RecordBatchFileReaderImpl","RecordBatchStreamReaderImpl","fromByteStream","readAllAsync","AsyncRecordBatchStreamReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","AsyncRecordBatchStreamReaderImpl","_readFooter","_readDictionaryBatch","seek","AsyncRecordBatchFileReaderImpl","_context10","_context11","_context12","_context13","_context14","_readAllAsync","_context15","_fromAsyncByteStream","_context18","_fromFileHandle","_context19","_yield$source$stat","BuilderTransform","_ReadableStream","_WritableStream","_numChunks","_finished","_bufferedSize","_options$queueingStra","builderOptions","_controller","_builder","_getSize","chunkByteLength","_readableStrategy$hig","readableHighWaterMark","_writableStrategy$hig","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","countBy","DataFrame","scan","scanReverse","predicate","FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","CountByResult","_predicate","isBound","and","util_bn_","util_int_","util_bit_","util_math_","util_buffer_","util_vector_","bm","hwm","pull","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","_open","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","numCols","rows","dataRows","dataColumns","serialize","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","render","Memo","getOwnPropertyNames","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","encodeURIComponent","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","ref","__self","__source","M","_owner","O","P","Q","keyPrefix","S","V","U","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","toObject","test1","test2","test3","split","letter","shouldUseNative"],"mappings":"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","file":"static/js/2.501b5008.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _AwaitValue(value) {\n  this.wrapped = value;\n}","import AwaitValue from \"./AwaitValue\";\nexport default function _awaitAsyncGenerator(value) {\n  return new AwaitValue(value);\n}","import AwaitValue from \"./AwaitValue\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen[\"return\"] !== \"function\") {\n    this[\"return\"] = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nAsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\nAsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\nAsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","export default function _asyncGeneratorDelegate(inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner[\"throw\"] === \"function\") {\n    iter[\"throw\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner[\"return\"] === \"function\") {\n    iter[\"return\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n}","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n"],"sourceRoot":""}