{"version":3,"sources":["index.ts"],"names":["interval","ArgsCheck","_classCallCheck","limit","key","_createClass","value","hasChanged","this","intervalTime","refreshCounter","count","counter","argsChecker","Streamlit","events","addEventListener","RENDER_EVENT","event","document","body","innerHTML","data","detail","refreshLimit","args","parseInt","refreshInterval","shouldReset","setInterval","setKey","setLimit","debounce","clearInterval","window","newCount","Math","min","Number","MAX_SAFE_INTEGER","setComponentValue","setComponentReady","setFrameHeight"],"mappings":"8MASC,IA+BGA,EA7BEC,EAAS,oBAAAA,IAAAC,YAAA,KAAAD,GAAA,KACbE,MAAuB,KAAI,KAC3BH,SAA0B,KAAI,KAC9BI,IAAqB,KAqBpB,OArBwBC,YAAAJ,EAAA,EAAAG,IAAA,WAAAE,MAEzB,SAASH,GACP,IAAMI,EAAaJ,IAAUK,KAAKL,MAGlC,OAFAK,KAAKL,MAAQA,EAENI,IACR,CAAAH,IAAA,cAAAE,MAED,SAAYG,GACV,IAAMF,EAAaE,IAAiBD,KAAKR,SAGzC,OAFAQ,KAAKR,SAAWS,EAETF,IACR,CAAAH,IAAA,SAAAE,MAED,SAAOF,GACL,IAAMG,EAAaH,IAAQI,KAAKJ,IAGhC,OAFAI,KAAKJ,IAAMA,EAEJG,MACRN,EAxBY,GA2BTS,EApCN,WACE,IAAIC,EAAQ,EAEZ,OAAO,WAEL,OADAA,GAAS,GAgCUC,GACjBC,EAAc,IAAIZ,EAsCxBa,IAAUC,OAAOC,iBAAiBF,IAAUG,cA9B5C,SAAkBC,GAChBC,SAASC,KAAKC,UAAY,GAE1B,IAAMC,EAAQJ,EAAkCK,OAC1CC,EAAeF,EAAKG,KAAKtB,MAAQuB,SAASJ,EAAKG,KAAKtB,MAAO,IAAM,KACjEwB,EAAkBD,SAASJ,EAAKG,KAAKzB,SAAU,IAC/C4B,EAAcf,EAAYgB,YAAYF,IAC1Cd,EAAYiB,OAAOR,EAAKG,KAAKrB,MAAQS,EAAYkB,SAASP,GAC5D,GAAIxB,EAAU,CACZ,IAAIsB,EAAKG,KAAKO,WAAYJ,EAIxB,OAHAK,cAAcjC,GAOlBA,EAAWkC,OAAOL,aAAY,WAC5B,IAAMM,EAAWC,KAAKC,IAAI3B,IAAkB4B,OAAOC,mBAE9Cf,GAAgBW,EAAWX,EAC9BV,IAAU0B,kBAAkBL,GAG5BF,cAAcjC,KAEf2B,MAQLb,IAAU2B,oBAIV3B,IAAU4B,eAAe,K","file":"static/js/main.d7c3a224.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nfunction counter(): () => number {\n  let count = 0\n\n  return function (): number {\n    count += 1\n    return count\n  }\n}\n\nclass ArgsCheck {\n  limit: number | null = null\n  interval: number | null = null\n  key: string | null = null\n\n  setLimit(limit: number | null) {\n    const hasChanged = limit !== this.limit\n    this.limit = limit\n\n    return hasChanged\n  }\n\n  setInterval(intervalTime: number) {\n    const hasChanged = intervalTime !== this.interval\n    this.interval = intervalTime\n\n    return hasChanged\n  }\n\n  setKey(key: string | null) {\n    const hasChanged = key !== this.key\n    this.key = key\n\n    return hasChanged\n  }\n}\n\nconst refreshCounter = counter()\nconst argsChecker = new ArgsCheck()\nlet interval: number\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  document.body.innerHTML = \"\"\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n  const refreshLimit = data.args.limit ? parseInt(data.args.limit, 10) : null\n  const refreshInterval = parseInt(data.args.interval, 10)\n  const shouldReset = argsChecker.setInterval(refreshInterval) || \n    argsChecker.setKey(data.args.key) || argsChecker.setLimit(refreshLimit)\n  if (interval) {\n    if (data.args.debounce || shouldReset) {\n      clearInterval(interval)\n    } else {\n      // We already have an interval so clear the screen.\n      return\n    }\n  }\n\n  interval = window.setInterval(() => {\n    const newCount = Math.min(refreshCounter(), Number.MAX_SAFE_INTEGER)\n    // There is no refresh counter or we are within the limit\n    if (!refreshLimit || newCount < refreshLimit) {\n      Streamlit.setComponentValue(newCount)\n    } else {\n      // No need to keep pinging, so clear the interval\n      clearInterval(interval)\n    }\n  }, refreshInterval)\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight(0)\n"],"sourceRoot":""}